package controllers

import (
	"net/http"
	"strings"

	dbpkg "{{ .ImportDir }}/db"
	"{{ .ImportDir }}/helper"
	"{{ .ImportDir }}/models"
	"{{ .ImportDir }}/version"

	"github.com/gin-gonic/gin"
)

func Get{{ pluralize .Model.Name }}(c *gin.Context) {
	ver, err := version.New(c)
	if err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}

	preloads := c.DefaultQuery("preloads", "")
	fields := helper.ParseFields(c.DefaultQuery("fields", "*"))
	ids := c.DefaultQuery("ids", "")

	pagination := dbpkg.Pagination{}
	db, err := pagination.Paginate(c)

	if err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}

	db = dbpkg.SetPreloads(preloads, db)

	if ids != "" {
		db = db.Where("id IN (?)", strings.Split(ids, ","))
	}

	var {{ pluralize (tolower .Model.Name) }} []models.{{ .Model.Name }}
	if err := db.Select("*").Find(&{{ pluralize (tolower .Model.Name) }}).Error; err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}

	// paging
	var index int
	if len({{ pluralize (tolower .Model.Name) }}) < 1 {
		index = 0
	} else {
		index = int({{ pluralize (tolower .Model.Name) }}[len({{ pluralize (tolower .Model.Name) }})-1].ID)
	}
	pagination.SetHeaderLink(c, index)

	if version.Range("1.0.0", "<=", ver) && version.Range(ver, "<", "2.0.0") {
		// conditional branch by version.
		// 1.0.0 <= this version < 2.0.0 !!
	}

	fieldMap := []map[string]interface{}{}
	for _, {{ tolower .Model.Name }} := range {{ pluralize (tolower .Model.Name) }} {
		fieldMap = append(fieldMap, helper.FieldToMap({{ tolower .Model.Name }}, fields))
	}

	_, ok := c.GetQuery("pretty")
	if ok {
		c.IndentedJSON(200, fieldMap)
	} else {
		c.JSON(200, fieldMap)
	}
}

func Get{{ .Model.Name }}(c *gin.Context) {
	ver, err := version.New(c)
	if err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}

	id := c.Params.ByName("id")
	preloads := c.DefaultQuery("preloads", "")
	fields := helper.ParseFields(c.DefaultQuery("fields", "*"))

	db := dbpkg.DBInstance(c)
	db = dbpkg.SetPreloads(preloads, db)

	var {{ tolower .Model.Name }} models.{{ .Model.Name }}
	if err := db.Select("*").First(&{{ tolower .Model.Name }}, id).Error; err != nil {
		content := gin.H{"error": "{{ tolower .Model.Name }} with id#" + id + " not found"}
		c.JSON(404, content)
		return
	}

	if version.Range("1.0.0", "<=", ver) && version.Range(ver, "<", "2.0.0") {
		// conditional branch by version.
		// 1.0.0 <= this version < 2.0.0 !!
	}

	fieldMap := helper.FieldToMap({{ tolower .Model.Name }}, fields)

	_, ok := c.GetQuery("pretty")
	if ok {
		c.IndentedJSON(200, fieldMap)
	} else {
		c.JSON(200, fieldMap)
	}
}

func Create{{ .Model.Name }}(c *gin.Context) {
	ver, err := version.New(c)
	if err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}

	db := dbpkg.DBInstance(c)
	var {{ tolower .Model.Name }} models.{{ .Model.Name }}

	if err := c.Bind(&{{ tolower .Model.Name }}); err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}

	if err := db.Create(&{{ tolower .Model.Name }}).Error; err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}

	if version.Range("1.0.0", "<=", ver) && version.Range(ver, "<", "2.0.0") {
		// conditional branch by version.
		// 1.0.0 <= this version < 2.0.0 !!
	}

	c.JSON(201, {{ tolower .Model.Name }})
}

func Update{{ .Model.Name }}(c *gin.Context) {
	ver, err := version.New(c)
	if err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}

	db := dbpkg.DBInstance(c)
	id := c.Params.ByName("id")
	var {{ tolower .Model.Name }} models.{{ .Model.Name }}
	if db.First(&{{ tolower .Model.Name }}, id).Error != nil {
		content := gin.H{"error": "{{ tolower .Model.Name }} with id#" + id + " not found"}
		c.JSON(404, content)
		return
	}

	if err := c.Bind(&{{ tolower .Model.Name }}); err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}

	db.Save(&{{ tolower .Model.Name }})

	if version.Range("1.0.0", "<=", ver) && version.Range(ver, "<", "2.0.0") {
		// conditional branch by version.
		// 1.0.0 <= this version < 2.0.0 !!
	}

	c.JSON(200, {{ tolower .Model.Name }})
}

func Delete{{ .Model.Name }}(c *gin.Context) {
	ver, err := version.New(c)
	if err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}

	db := dbpkg.DBInstance(c)
	id := c.Params.ByName("id")
	var {{ tolower .Model.Name }} models.{{ .Model.Name }}
	if db.First(&{{ tolower .Model.Name }}, id).Error != nil {
		content := gin.H{"error": "{{ tolower .Model.Name }} with id#" + id + " not found"}
		c.JSON(404, content)
		return
	}
	db.Delete(&{{ tolower .Model.Name }})

	if version.Range("1.0.0", "<=", ver) && version.Range(ver, "<", "2.0.0") {
		// conditional branch by version.
		// 1.0.0 <= this version < 2.0.0 !!
	}

	c.Writer.WriteHeader(http.StatusNoContent)
}
